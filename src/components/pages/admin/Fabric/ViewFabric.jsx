import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";
const apiBaseUrl = import.meta.env.VITE_API_BASE_URL;

// Decode JWT without external library
const decodeJwt = (token) => {
Â  try {
Â  Â  const base64Url = token.split('.')[1];
Â  Â  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
Â  Â  const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
Â  Â  Â  return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
Â  Â  }).join(''));
Â  Â  return JSON.parse(jsonPayload);
Â  } catch (error) {
Â  Â  console.error("Error decoding JWT:", error);
Â  Â  return null;
Â  }
};

// ðŸ”¹ Helper function: safe date format (DD/MM/YYYY)
const formatDate = (dateStr) => {
Â  if (!dateStr) return "N/A";
Â  
Â  const d = new Date(dateStr);
Â  if (!isNaN(d.getTime())) {
Â  Â  return d.toLocaleDateString("en-GB");
Â  }
Â  return dateStr;
};

// ðŸ”¹ Modal Component to show details
const DetailsModal = ({ item, onClose }) => {
Â  if (!item) return null;

Â  return (
Â  Â  <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
Â  Â  Â  Â  <h3 className="text-xl font-bold mb-4 text-center">Fabric Details</h3>
Â  Â  Â  Â  <ul className="space-y-2">
Â  Â  Â  Â  Â  <li><strong>Supplier Name:</strong> {item.supplier_name}</li>
Â  Â  Â  Â  Â  <li><strong>Date:</strong> {formatDate(item.date)}</li>
Â  Â  Â  Â  Â  <li><strong>Invoice Number:</strong> {item.invoice_no}</li>
Â  Â  Â  Â  Â  <li><strong>Fabric Type:</strong> {item.fabric_type_name}</li>
Â  Â  Â  Â  Â  <li><strong>Unique Number:</strong> {item.unique_number}</li>
Â  Â  Â  Â  Â  <li><strong>Weight:</strong> {item.weight_of_material} kg</li>
Â  Â  Â  Â  </ul>
Â  Â  Â  Â  <div className="flex justify-end mt-6">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onClose}
Â  Â  Â  Â  Â  Â  className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Close
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};


const ViewFabric = () => {
Â  const [receipts, setReceipts] = useState([]);
Â  const [suppliers, setSuppliers] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const navigate = useNavigate();
Â  const { branchId: urlBranchId } = useParams();
Â  
Â  const [branchId, setBranchId] = useState(null);
Â  const [showDetailsModal, setShowDetailsModal] = useState(false);
Â  const [selectedFabricDetails, setSelectedFabricDetails] = useState(null);

Â  // State for Print Modal
Â  const [showPrintModal, setShowPrintModal] = useState(false);
Â  const [printData, setPrintData] = useState(null);
Â  const printModalRef = useRef(null);

Â  useEffect(() => {
Â  Â  const token = localStorage.getItem("branchToken");
Â  Â  if (token) {
Â  Â  Â  const decoded = decodeJwt(token);
Â  Â  Â  if (decoded && decoded.branch_id) {
Â  Â  Â  Â  setBranchId(decoded.branch_id);
Â  Â  Â  } else {
Â  Â  Â  Â  console.error("Failed to decode token or get branch ID.");
Â  Â  Â  Â  navigate("/login");
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  navigate("/login");
Â  Â  }
Â  }, [navigate]);

Â  useEffect(() => {
Â  Â  if (branchId && branchId === parseInt(urlBranchId)) {
Â  Â  Â  Â  fetchData(branchId);
Â  Â  } else if (branchId && branchId !== parseInt(urlBranchId)) {
Â  Â  Â  console.warn("Branch ID mismatch between token and URL. Redirecting to correct branch page.");
Â  Â  Â  navigate(`/admin/${branchId}/dashboard/fabric/view`);
Â  Â  }
Â  }, [branchId, urlBranchId, navigate]);

Â  const fetchData = async (currentBranchId) => {
Â  Â  const token = localStorage.getItem('branchToken');
Â  Â  if (!token) {
Â  Â  Â  console.error("Login required. Redirecting to login page.");
Â  Â  Â  navigate("/login");
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  setLoading(true);

Â  Â  try {
Â  Â  Â  const [receiptsRes, suppliersRes, fabricTypesRes] = await Promise.all([
Â  Â  Â  Â  axios.get(`${apiBaseUrl}/api/receipts?branchId=${currentBranchId}`, { headers: { Authorization: `Bearer ${token}` }}),
Â  Â  Â  Â  axios.get(`${apiBaseUrl}/api/receipts/suppliers?branchId=${currentBranchId}`, { headers: { Authorization: `Bearer ${token}` }}),
Â  Â  Â  Â  axios.get(`${apiBaseUrl}/api/receipts/fabric-types?branchId=${currentBranchId}`, { headers: { Authorization: `Bearer ${token}` }})
Â  Â  Â  ]);

Â  Â  Â  const suppliersMap = new Map(suppliersRes.data.map(s => [s.id, s.supplier_name]));
Â  Â  Â  const fabricTypesMap = new Map(fabricTypesRes.data.map(f => [f.id, f.fabric_type_name]));

Â  Â  Â  const mappedReceipts = receiptsRes.data.map(receipt => ({
Â  Â  Â  Â  ...receipt,
Â  Â  Â  Â  supplier_name: suppliersMap.get(receipt.supplier_id) || 'Unknown',
Â  Â  Â  Â  fabric_type_name: receipt.fabric_type || 'N/A'
Â  Â  Â  }));
Â  Â  Â  
Â  Â  Â  setReceipts(mappedReceipts);
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error fetching data:", error);
Â  Â  Â  if (error.response && (error.response.status === 401 || error.response.status === 403)) {
Â  Â  Â  Â  Â  navigate("/login");
Â  Â  Â  }
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // âœ… New function to handle view button click and show modal
Â  const handleView = (item) => {
Â  Â  setSelectedFabricDetails(item);
Â  Â  setShowDetailsModal(true);
Â  };
Â  
Â  // âœ… Function to handle closing the modal
Â  const handleCloseModal = () => {
Â  Â  setShowDetailsModal(false);
Â  Â  setSelectedFabricDetails(null);
Â  };

Â  // âœ… CORRECTED: handleDuplicate function
Â  const handleDuplicate = (item) => {
Â  Â  localStorage.setItem("duplicateData", JSON.stringify({
Â  Â  Â  unique_number: item.unique_number,
Â  Â  Â  supplier_name: item.supplier_name,
Â  Â  Â  supplier_short_name: item.supplier_short_name,
Â  Â  Â  invoice_no: item.invoice_no,
Â  Â  Â  date: item.date,
Â  Â  Â  weight_of_material: item.weight_of_material,
Â  Â  Â  fabric_type: item.fabric_type,
Â  Â  }));
Â  Â  navigate(`/admin/${branchId}/dashboard/fabric/add`);
Â  };
Â  
Â  // âœ… Updated handlePrint to show a modal first
Â  const handlePrint = (item) => {
Â  Â  setPrintData(item);
Â  Â  setShowPrintModal(true);
Â  };

Â  // âœ… New function to print only the modal content
Â  const printReceiptModal = () => {
Â  Â  const printContent = printModalRef.current;
Â  Â  if (printContent) {
Â  Â  Â  const newWindow = window.open('', '_blank');
Â  Â  Â  newWindow.document.write('<html><head><title>Fabric Receipt</title></head><body>');
Â  Â  Â  newWindow.document.write('<style>@media print { body { -webkit-print-color-adjust: exact; } }</style>');
Â  Â  Â  newWindow.document.write(printContent.innerHTML);
Â  Â  Â  newWindow.document.write('</body></html>');
Â  Â  Â  newWindow.document.close();
Â  Â  Â  newWindow.focus();
Â  Â  Â  newWindow.print();
Â  Â  Â  newWindow.close();
Â  Â  Â  setShowPrintModal(false);
Â  Â  Â  setPrintData(null);
Â  Â  }
Â  };

Â  if (!branchId || loading) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen flex items-center justify-center">
Â  Â  Â  Â  <p className="text-center text-lg">Loading...</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="p-4 bg-gray-100 min-h-screen text-gray-800">
Â  Â  Â  <h2 className="text-xl font-bold mb-4">View Fabric</h2>
Â  Â  Â  <div className="overflow-x-auto">
Â  Â  Â  Â  <table className="min-w-full bg-white border border-gray-300 text-center shadow-lg rounded-lg">
Â  Â  Â  Â  Â  <thead className="bg-blue-600 text-white">
Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">S. No.</th>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">Date</th>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">Supplier name</th>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">Fabric Type</th>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">Invoice number</th>
Â  Â  Â  Â  Â  Â  Â  <th className="border-b p-3">Action</th>
Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  {receipts.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  receipts.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  <tr
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="hover:bg-gray-50 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3">{index + 1}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3">{formatDate(item.date)}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3">{item.supplier_name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3">{item.fabric_type_name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3">{item.invoice_no}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="border-b p-3 flex justify-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* âœ… Updated View button with modal functionality */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleView(item)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  View
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDuplicate(item)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-purple-600 hover:text-purple-800 font-medium"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ“‹ Duplicate
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => handlePrint(item)} className="bg-gray-700 text-white px-3 py-1 rounded-md hover:bg-black transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ“‘ Print
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <td
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="border-b p-3 text-center text-gray-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  colSpan="6"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  No records found
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </table>
Â  Â  Â  </div>

Â  Â  Â  <div className="flex justify-end mt-4 gap-2 text-sm">
Â  Â  Â  Â  <span className="text-gray-600">Page 1, 2, 3, 4 ...</span>
Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  {/* ðŸ”¹ Render the modal if showDetailsModal is true */}
Â  Â  Â  {showDetailsModal && (
Â  Â  Â  Â  <DetailsModal item={selectedFabricDetails} onClose={handleCloseModal} />
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {/* âœ… Print Modal component */}
Â  Â  Â  {showPrintModal && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
Â  Â  Â  Â  Â  Â  <div ref={printModalRef}>
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-2xl font-bold mb-4 text-center">Fabric Receipt</h3>
Â  Â  Â  Â  Â  Â  Â  {printData && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-4 border border-gray-300 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Date:</strong> {formatDate(printData.date)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Supplier:</strong> {printData.supplier_name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Invoice No:</strong> {printData.invoice_no}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Fabric Type:</strong> {printData.fabric_type_name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Weight:</strong> {printData.weight_of_material} kg</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="flex justify-end mt-6 space-x-2">
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowPrintModal(false)}
Â  Â  Â  Â  Â  Â  Â  Â  className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={printReceiptModal}
Â  Â  Â  Â  Â  Â  Â  Â  className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Print
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default ViewFabric;